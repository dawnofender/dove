todo

########
# DOVE #
########

int main() {
    Thingy universe( "hello world!" );
    
    Thingy *you = &universe.createChild( "despite everything, it's still you." );
    
    dov::genisis(universe, you);

    return 0;
}
    
void dov::genisis(Thingy *world, Thingy *you) {
    world->addComponent< Physics >();

    you->addComponent< Perception >();
    you->addComponent< Expression >();

    // set up physics and graphics etc.
    
    do {
        // update components, 
        // render frame, 
        // process input, 
        // etc.
    } while ( world != nullptr );
}


ideas: 
- maybe instead of the universe being a thingy with a physics component, it would be simpler to have a universe class that extends thingy and comes with physics by default.
    - probably not doing this tho
- spacetime component that knows about every transform, handles deltatime, timers, etc.
- more thingy types, or template, with specific features & amount of children
    - useful for octree & similar data structures 
- 'player controller' is boring. lets fix that
    - 'Expression' for control
    - 'Perception' for graphics, audio, haptics, etc.
- instead of rigidbody component / similar components, have a special type of transform component that contains any physics features you need
- components are actually thingies. so you can grab them and develop things with them, in-world
- memory-optimized way to get any component's host using a static unordered component->host map

high priority: 
- implement equivalent of materials, a layer between meshrenderers and shaders that can handle uniforms and be reused
- virtual component members for project data
    - template data member (whats actually saved to a file)
    - load and save functions (called for every component)

do sometime: 
- some variables may need global access for complicated systems, like the camera
    - store these in universe object?
- setInternalTickCallback in physics 
- namespace for dov
- use two threads, one for polling events and one for rendering. use glfwWaitEvents to block the event thread until events are available

eventually: 
- octree based LOD where closest 8 on each depth level get rendered and nodes are mapped to what objects they contain
- unify file system and game engine
    - efficiently serialize & deserialize objects & components
    - file thingies which exist in the universe but reference actual files
        - these connect to asset types somehow... so assets 

########
# GAIA #
########

high priority:
- try using mesh regeneration for updating chunk thingies
- simplify duplicates 
- write data to file
- load data from images (heightmap & 'matter maps')? 
    - would be great for quick testing before worring about complex world generation


do sometime:
- generate smooth mesh based on density of cell
- try storing cell addresses (bitfields representing indexes in parents, directions on how to get to the cell) 
    - these could be used to calculate position on bit-level?
- improve simplify duplicates by including orientation - flipped / rotated duplicates
- map cells to matter which store actual composition of the cell (objects must be optimized in a similar way)

do eventually:
- imposters for large cells, generate depth and normals straight from cell data

