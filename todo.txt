todo

########
# DOVE #
########

Dove is a virtual environment where creation and experience live in the same world.
Very few of these exist in 3D environments - even fewer exist in VR. 
One very good example of a world like this is Minecraft - a world made of blocks, where the tools to create are so simple that a young child could pick it up.
Dove strives to achieve this path of creation, this simplicity and freedom, without limiting those who want to push further.
However, this must be done without taking away from the experience itself. 

how?
maybe limitations are necessary. it's easier to approach a limited environment, and even fun to try and push those limits. 
- separate clients?
    - a light client for just experiencing a specific world
    - a light client for experiencing, but with added freedom to explore
    - a medium client for exploration and personal expression (avatars, props, other forms of media can be used, but not created)
        - eg. VRChat
    - a creator client which gives full freedom

current design philosophies VERY SUBJECT TO CHANGE i am still learning and this may be stupid :)
- avoid having systems controlled globally by say, one static member. this stuff limits our ability to exist between worlds
    - eg. physics system could just be one static bullet3 dynamicsworld. but 

example of ideal code flow

int main() {
    Thingy *universe = new Thingy( "hello world!" );
    
    Thingy *you = &universe.createChild( "despite everything, it's still you." );
    
    dov::genisis(universe, you);

    return 0;
}
    
void dov::genisis(Thingy *world, Thingy *you) {
    world->addComponent< Physics >();      

    you->addComponent< Perception >();     // automatically creates camera, audio listener, haptics(?), etc.
    you->addComponent< Expression >();     // automatically creates player controller, mic output, fbt, etc.

    // set up physics and graphics etc.
    
    do {
        // update components, 
        // render frame, 
        // process input, 
        // etc.
    } while ( world != nullptr );
}


ideas: 
- if a player's transform becomes NAN, move them under the asset root (reference to TADC)
- spacetime component that knows about every transform, maybe sorting them into zones for fast transform gets, handles deltatime, timers, etc.
- more thingy types, or template, with specific features & amount of children
    - useful for octree & similar data structures 
- 'player controller' is boring. lets fix that
    - 'Expression' for control
    - 'Perception' for graphics, audio, haptics, etc.
- instead of rigidbody component / similar components, have a special type of transform component that contains any physics features you need
- memory-optimized way to get any component's host using a static unordered component->host map
- GetComponent optimization by moving frequent gets to the top
    - trying to make up for how transform is used constantly but may not be at the top of the list

greater plan:
- roughly in this order, implement rudimentary version of:
    - shared libraries? plugins? some kind of modular content system
    - serialization & deserialization
    - networking
- having learned about all of those topics, now start refining to make it all work together smoothly
- reduce base engine just the modular content framework
- so now, the experience is built on programs depending on each other, maybe like this:
    - social VR platform 
        - items, worlds, avatars
            - thingies and components
                - dove
        - networking
            - serialization / deserialization
                - dove
- once this framework is done and solid, make the make some simple games with it on steam
    - flood escape style game
    - minecraft style game (see GAIA)
- 



high priority: 
- implement equivalent of materials, a layer between meshrenderers and shaders that can handle uniforms and be reused
- virtual component members for project data
    - template data member (whats actually saved to a file)
    - load and save functions (called for every component)
- input listener
    - initialize with a callback function

do sometime: 
- some variables may need global access for complicated systems, like the camera
    - store these in universe object?
- setInternalTickCallback in physics 
- namespace for dov
- use two threads, one for polling events and one for rendering. use glfwWaitEvents to block the event thread until events are available

eventually: 
- octree based LOD where closest 8 on each depth level get rendered and nodes are mapped to what objects they contain
- unify file system and game engine
    - efficiently serialize & deserialize objects & components
    - file thingies which exist in the universe but reference actual files
        - these connect to asset types somehow... so assets 

########
# GAIA #
########

high priority:
- try using mesh regeneration for updating chunk thingies
- simplify duplicates 
- write data to file
- load data from images (heightmap & 'matter maps')? 
    - would be great for quick testing before worring about complex world generation


do sometime:
- generate smooth mesh based on density of cell
- try storing cell addresses (bitfields representing indexes in parents, directions on how to get to the cell) 
    - these could be used to calculate position on bit-level?
- improve simplify duplicates by including orientation - flipped / rotated duplicates
- map cells to matter which store actual composition of the cell (objects must be optimized in a similar way)

do eventually:
- imposters for large cells, generate depth and normals straight from cell data


#################################
# remember why you started this #
#################################
